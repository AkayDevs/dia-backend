"""initial migration with granular analysis models

Revision ID: 134cf601cb78
Revises: 
Create Date: 2025-01-14 06:56:24.134298+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '134cf601cb78'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('analysis_types',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.Enum('TABLE_ANALYSIS', 'TEXT_ANALYSIS', 'TEMPLATE_CONVERSION', name='analysistypeenum'), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('supported_document_types', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('blacklisted_tokens',
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('blacklisted_on', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('token')
    )
    op.create_index(op.f('ix_blacklisted_tokens_token'), 'blacklisted_tokens', ['token'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('avatar', sa.String(), nullable=True),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='userrole'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_token', sa.String(), nullable=True),
    sa.Column('password_reset_token', sa.String(), nullable=True),
    sa.Column('password_reset_expires', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index('ix_users_password_reset', 'users', ['password_reset_token', 'password_reset_expires'], unique=False)
    op.create_index('ix_users_role_active', 'users', ['role', 'is_active'], unique=False)
    op.create_index('ix_users_verification', 'users', ['verification_token', 'is_verified'], unique=False)
    op.create_table('analysis_steps',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.Enum('TABLE_DETECTION', 'TABLE_STRUCTURE_RECOGNITION', 'TABLE_DATA_EXTRACTION', 'TEXT_DETECTION', 'TEXT_RECOGNITION', 'TEXT_CLASSIFICATION', 'TEMPLATE_DETECTION', 'TEMPLATE_MATCHING', 'TEMPLATE_EXTRACTION', name='analysisstepenum'), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('analysis_type_id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('base_parameters', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_type_id'], ['analysis_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('documents',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.Enum('PDF', 'DOCX', 'XLSX', 'IMAGE', name='documenttype'), nullable=False),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('previous_version_id', sa.String(), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('retention_until', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_documents_id', 'documents', ['id'], unique=False)
    op.create_index('ix_documents_name', 'documents', ['name'], unique=False)
    op.create_index('ix_documents_type', 'documents', ['type'], unique=False)
    op.create_index('ix_documents_user_id_uploaded_at', 'documents', ['user_id', 'uploaded_at'], unique=False)
    op.create_table('algorithms',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=False),
    sa.Column('step_id', sa.String(length=36), nullable=False),
    sa.Column('supported_document_types', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['step_id'], ['analysis_steps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('analyses',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('document_id', sa.String(length=36), nullable=False),
    sa.Column('analysis_type_id', sa.String(length=36), nullable=False),
    sa.Column('mode', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.String(length=500), nullable=True),
    sa.ForeignKeyConstraint(['analysis_type_id'], ['analysis_types.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('document_tags',
    sa.Column('document_id', sa.String(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('document_id', 'tag_id')
    )
    op.create_index('ix_document_tags_document_id', 'document_tags', ['document_id'], unique=False)
    op.create_index('ix_document_tags_tag_id', 'document_tags', ['tag_id'], unique=False)
    op.create_table('analysis_step_results',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('analysis_id', sa.String(length=36), nullable=False),
    sa.Column('step_id', sa.String(length=36), nullable=False),
    sa.Column('algorithm_id', sa.String(length=36), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('parameters', sa.JSON(), nullable=True),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('user_corrections', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.String(length=500), nullable=True),
    sa.ForeignKeyConstraint(['algorithm_id'], ['algorithms.id'], ),
    sa.ForeignKeyConstraint(['analysis_id'], ['analyses.id'], ),
    sa.ForeignKeyConstraint(['step_id'], ['analysis_steps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('analysis_step_results')
    op.drop_index('ix_document_tags_tag_id', table_name='document_tags')
    op.drop_index('ix_document_tags_document_id', table_name='document_tags')
    op.drop_table('document_tags')
    op.drop_table('analyses')
    op.drop_table('algorithms')
    op.drop_index('ix_documents_user_id_uploaded_at', table_name='documents')
    op.drop_index('ix_documents_type', table_name='documents')
    op.drop_index('ix_documents_name', table_name='documents')
    op.drop_index('ix_documents_id', table_name='documents')
    op.drop_table('documents')
    op.drop_table('analysis_steps')
    op.drop_index('ix_users_verification', table_name='users')
    op.drop_index('ix_users_role_active', table_name='users')
    op.drop_index('ix_users_password_reset', table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_blacklisted_tokens_token'), table_name='blacklisted_tokens')
    op.drop_table('blacklisted_tokens')
    op.drop_table('analysis_types')
    # ### end Alembic commands ### 